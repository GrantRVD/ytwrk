package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"unicode"
)

func main() {
	if len(os.Args) != 2 {
		usage()
	}
	arg := os.Args[1]
	lineNr, err := strconv.ParseUint(arg, 10, 64)
	if err != nil {
		println(err.Error())
		os.Exit(1)
	}
	if lineNr == 0 {
		usage()
	}
	rd := bufio.NewReader(os.Stdin)
	total := uint64(0)
	for i := uint64(0); i < lineNr; i++ {
		lineLen, err := readLine(rd, total)
		total += lineLen
		if err != nil {
			println(err.Error())
			os.Exit(1)
		}
	}
	fmt.Println(total - 1)
}

func readLine(rd *bufio.Reader, offset uint64) (total uint64, err error) {
	for {
		rn, size, err := rd.ReadRune()
		if err != nil {
			return total, err
		}
		total += uint64(size)
		switch rn {
		case '\n':
			return total, err
		case 0x00:
			fmt.Fprintf(os.Stderr, "WARN Null byte at %d\n", offset+total-1)
		case unicode.ReplacementChar:
			if size == 1 {
				// A replacement char with size one is generated by Go
				fmt.Fprintf(os.Stderr, "WARN Invalid unicode at %d\n", offset+total-1)
			}
		}
	}
}

func usage() {
	println("Usage: find_offset <line number>")
	os.Exit(2)
}
